# DETERMINATION.py
#
# A completely remade Discord bot using the Gemini API to provide spontaneous,
# engaging content with a distinct Vietnamese personality.
#
# --- SETUP ---
# 1. Install necessary libraries:
#    pip install -U py-cord google-generativeai python-dotenv
#
# 2. Create a file named DETERMINATION.env in the same directory as this script.
#
# 3. Inside the DETERMINATION.env file, add your secret keys:
#    DISCORD_BOT_TOKEN="YOUR_DISCORD_BOT_TOKEN_HERE"
#    GEMINI_API_KEY="YOUR_GEMINI_API_KEY_HERE"
#
# 4. Get your credentials from the Discord Developer Portal and Google AI Studio.
#
# 5. Run the bot from your terminal:
#    python DETERMINATION.py

import os
import random
import re
import time
from collections import deque
import discord
from discord.ui import InputText, Modal
import google.generativeai as genai
from dotenv import load_dotenv

# --- CORE CONFIGURATION ---
load_dotenv(dotenv_path='DETERMINATION.env')
DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not DISCORD_BOT_TOKEN or not GEMINI_API_KEY:
    raise ValueError("Discord token or Gemini API key not found in .env file.")

# Configure Gemini API
genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-2.5-flash-lite')


# --- RATE LIMITING ---
class RateLimiter:

    def __init__(self, rpm_limit: int, daily_limit: int):
        self.rpm_limit = rpm_limit
        self.daily_limit = daily_limit
        self.requests_minute = deque()
        self.requests_day = deque()

    def check(self) -> tuple[bool, str]:
        """Checks if a request is allowed. Returns (is_limited, message)."""
        current_time = time.time()

        # Clean old timestamps
        while self.requests_minute and current_time - self.requests_minute[
                0] > 60:
            self.requests_minute.popleft()
        while self.requests_day and current_time - self.requests_day[0] > 86400:
            self.requests_day.popleft()

        # Check limits
        if len(self.requests_minute) >= self.rpm_limit:
            return True, "Bot ƒëang b·∫≠n suy nghƒ©! Vui l√≤ng th·ª≠ l·∫°i sau m·ªôt ph√∫t."
        if len(self.requests_day) >= self.daily_limit:
            return True, "H√¥m nay bot ƒë√£ d√πng h·∫øt nƒÉng l∆∞·ª£ng r·ªìi. H·∫πn g·∫∑p l·∫°i b·∫°n v√†o ng√†y mai nh√©!"

        return False, ""

    def record_request(self):
        """Records a new request timestamp."""
        current_time = time.time()
        self.requests_minute.append(current_time)
        self.requests_day.append(current_time)


limiter = RateLimiter(rpm_limit=10, daily_limit=499)

# --- BOT INITIALIZATION ---
intents = discord.Intents.default()
bot = discord.Bot(intents=intents)


# --- GEMINI HELPER ---
async def ask_gemini(prompt: str) -> str:
    """A robust helper to query the Gemini API with error handling."""
    print(f"Querying Gemini: '{prompt[:60]}...'")
    try:
        response = gemini_model.generate_content(prompt)
        if not response.candidates:
            return "R·∫•t ti·∫øc, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi. C√≥ th·ªÉ n·ªôi dung ƒë√£ b·ªã ch·∫∑n v√¨ l√Ω do an to√†n."
        return response.text
    except Exception as e:
        print(f"Gemini API Error: {e}")
        return f"Xin l·ªói, c√≥ m·ªôt l·ªói nh·ªè ƒë√£ x·∫£y ra khi t√¥i ƒëang k·∫øt n·ªëi v·ªõi v≈© tr·ª•: {e}"


# --- UI MODAL FOR TAROT ---
class TarotInquiryModal(Modal):

    def __init__(self, card_info: str):
        super().__init__(title="H·ªèi Tarot V·ªÅ V·∫≠n M·ªánh")
        self.card_info = card_info
        self.add_item(
            InputText(label="C√¢u h·ªèi c·ªßa b·∫°n l√† g√¨?",
                      placeholder=
                      "V√≠ d·ª•: S·ª± nghi·ªáp c·ªßa t√¥i s·∫Øp t·ªõi s·∫Ω c√≥ kh·ªüi s·∫Øc kh√¥ng?",
                      style=discord.InputTextStyle.long))

    async def callback(self, interaction: discord.Interaction):
        question = self.children[0].value
        await interaction.response.defer(ephemeral=False)

        is_limited, msg = limiter.check()
        if is_limited:
            await interaction.followup.send(msg, ephemeral=True)
            return
        limiter.record_request()

        prompt = (
            f"B·∫°n l√† m·ªôt chuy√™n gia Tarot s√¢u s·∫Øc v√† th·∫•u c·∫£m. "
            f"L√° b√†i ƒë√£ ƒë∆∞·ª£c r√∫t l√† '{self.card_info}'. Ng∆∞·ªùi d√πng c√≥ c√¢u h·ªèi: '{question}'. "
            "H√£y ph√¢n t√≠ch, k·∫øt n·ªëi √Ω nghƒ©a c·ªßa l√° b√†i v·ªõi c√¢u h·ªèi ƒë·ªÉ ƒë∆∞a ra m·ªôt l·ªùi khuy√™n ch√¢n th√†nh, "
            "chi ti·∫øt v√† s√¢u s·∫Øc. S·ª≠ d·ª•ng ng√¥n ng·ªØ ti·∫øng Vi·ªát t·ª± nhi√™n, g·∫ßn g≈©i."
        )
        interpretation = await ask_gemini(prompt)

        embed = discord.Embed(title=f"L·ªùi Gi·∫£i ƒê√°p Cho L√° {self.card_info}",
                              description=interpretation,
                              color=discord.Color.purple())
        embed.set_footer(
            text=f"D√†nh cho c√¢u h·ªèi c·ªßa {interaction.user.display_name}")
        await interaction.followup.send(embed=embed)


# --- BOT EVENTS ---
@bot.event
async def on_ready():
    print(f"Bot '{bot.user.name}' ƒë√£ th·ª©c gi·∫•c v√† s·∫µn s√†ng gieo qu·∫ª!")
    print(f"ID: {bot.user.id}")
    print("-" * 20)


# --- BOT COMMANDS ---
@bot.slash_command(name="ping",
                   description="Ki·ªÉm tra xem bot c√≥ ƒëang ho·∫°t ƒë·ªông kh√¥ng.")
async def ping(ctx: discord.ApplicationContext):
    await ctx.respond(
        f"Pong! Bot v·∫´n ·ªü ƒë√¢y, v·ªõi ƒë·ªô tr·ªÖ {bot.latency*1000:.2f}ms. S·∫µn s√†ng cho m·ªçi cu·ªôc vui!",
        ephemeral=True)


@bot.slash_command(name="tarot",
                   description="R√∫t m·ªôt l√° b√†i Tarot ƒë·ªÉ xem v·∫≠n m·ªánh h√¥m nay.")
async def tarot(ctx: discord.ApplicationContext):
    is_limited, msg = limiter.check()
    if is_limited:
        await ctx.respond(msg, ephemeral=True)
        return
    limiter.record_request()

    await ctx.defer()

    prompt = (
        "B·∫°n l√† m·ªôt ng∆∞·ªùi gieo b√†i Tarot. H√£y r√∫t m·ªôt l√° b√†i ng·∫´u nhi√™n t·ª´ b·ªô b√†i Tarot (Major ho·∫∑c Minor Arcana). "
        "Sau ƒë√≥, ch·ªçn ng·∫´u nhi√™n tr·∫°ng th√°i c·ªßa n√≥ (xu√¥i ho·∫∑c ng∆∞·ª£c). "
        "Ch·ªâ tr·∫£ v·ªÅ t√™n l√° b√†i v√† tr·∫°ng th√°i theo ƒë·ªãnh d·∫°ng: 'T√™n L√° B√†i (Xu√¥i/Ng∆∞·ª£c)'. "
        "V√≠ d·ª•: 'The Magician (Upright)'. Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.")
    card_info = await ask_gemini(prompt)

    await ctx.followup.send(
        f"V≈© tr·ª• ƒë√£ g·ª≠i m·ªôt th√¥ng ƒëi·ªáp cho {ctx.author.mention} qua l√° b√†i **{card_info.strip()}**.\n"
        "B·∫°n c√≥ mu·ªën h·ªèi g√¨ th√™m v·ªÅ l√° b√†i n√†y kh√¥ng?",
        view=TarotInquiryView(card_info.strip()))


class TarotInquiryView(discord.ui.View):

    def __init__(self, card_info: str):
        super().__init__(timeout=300)  # View times out after 5 minutes
        self.card_info = card_info

    @discord.ui.button(label="ƒê·∫∑t C√¢u H·ªèi Chi Ti·∫øt",
                       style=discord.ButtonStyle.primary,
                       emoji="‚ùì")
    async def ask_question(self, button: discord.ui.Button,
                           interaction: discord.Interaction):
        modal = TarotInquiryModal(self.card_info)
        await interaction.response.send_modal(modal)
        # Disable the button after it's clicked
        self.stop()
        button.disabled = True
        await interaction.message.edit(view=self)


@bot.slash_command(name="yesno",
                   description="H·ªèi m·ªôt c√¢u h·ªèi C√≥/Kh√¥ng, ƒë·ªÉ v≈© tr·ª• tr·∫£ l·ªùi.")
async def yesno(ctx: discord.ApplicationContext, question: discord.Option(
    str, "C√¢u h·ªèi b·∫°n mu·ªën bi·∫øt c√¢u tr·∫£ l·ªùi.")):
    is_limited, msg = limiter.check()
    if is_limited:
        await ctx.respond(msg, ephemeral=True)
        return
    limiter.record_request()

    await ctx.defer()

    answer = random.choice(["C√≥", "Kh√¥ng"])
    prompt = (
        f"B·∫°n l√† m·ªôt nh√† ti√™n tri h√≥m h·ªânh. V·ªõi c√¢u h·ªèi '{question}', "
        f"s·ªë ph·∫≠n ƒë√£ th√¨ th·∫ßm c√¢u tr·∫£ l·ªùi l√† '{answer}'. "
        "H√£y di·ªÖn gi·∫£i c√¢u tr·∫£ l·ªùi n√†y m·ªôt c√°ch ƒë·∫ßy ·∫©n √Ω, th√∫ v·ªã, v√† ƒë·ª´ng ti·∫øt l·ªô tr·ª±c ti·∫øp 'C√≥' hay 'Kh√¥ng'. "
        "H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.")

    presentation = await ask_gemini(prompt)

    embed = discord.Embed(
        title=f"D√†nh cho c√¢u h·ªèi c·ªßa {ctx.author.display_name}",
        description=f"> {question}",
        color=discord.Color.green() if answer == "C√≥" else discord.Color.red())
    embed.add_field(name="V≈© tr·ª• th√¨ th·∫ßm...", value=presentation)

    response_message = await ctx.followup.send(embed=embed)
    await response_message.add_reaction('üëç' if answer == "C√≥" else 'üëé')


@bot.slash_command(name="diceroll",
                   description="Tung x√∫c x·∫Øc may m·∫Øn (v√≠ d·ª•: 2d6, 1d20).")
async def diceroll(ctx: discord.ApplicationContext,
                   dice: discord.Option(str,
                                        "X√∫c x·∫Øc c·∫ßn tung (ƒë·ªãnh d·∫°ng NdN).")):
    match = re.fullmatch(r'(\d+)d(\d+)', dice.lower())
    if not match:
        await ctx.respond(
            "ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng! H√£y d√πng `NdN` (v√≠ d·ª•: `2d6`, `1d20`).",
            ephemeral=True)
        return

    num_dice, num_sides = int(match.group(1)), int(match.group(2))
    if not (1 <= num_dice <= 100 and 2 <= num_sides <= 1000):
        await ctx.respond(
            "S·ªë l∆∞·ª£ng x√∫c x·∫Øc (1-100) ho·∫∑c s·ªë m·∫∑t (2-1000) kh√¥ng h·ª£p l·ªá.",
            ephemeral=True)
        return

    is_limited, msg = limiter.check()
    if is_limited:
        await ctx.respond(msg, ephemeral=True)
        return
    limiter.record_request()

    await ctx.defer()

    rolls = [random.randint(1, num_sides) for _ in range(num_dice)]
    total = sum(rolls)

    prompt = (
        f"B·∫°n l√† m·ªôt ng∆∞·ªùi d·∫´n truy·ªán game ƒë·∫ßy k·ªãch t√≠nh. Ng∆∞·ªùi ch∆°i v·ª´a tung {dice}. "
        f"K·∫øt qu·∫£ t·ª´ng vi√™n l√†: {', '.join(map(str, rolls))}. T·ªïng ƒëi·ªÉm l√† {total}. "
        "H√£y t∆∞·ªùng thu·∫≠t l·∫°i c·∫£nh tung x√∫c x·∫Øc n√†y m·ªôt c√°ch h√†o h√πng v√† s·ªëng ƒë·ªông. "
        "Nh·∫•n m·∫°nh v√†o k·∫øt qu·∫£ cu·ªëi c√πng. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.")

    presentation = await ask_gemini(prompt)
    await ctx.followup.send(
        f"**{ctx.author.mention}** tung x√∫c x·∫Øc...\n\n{presentation}")


# --- RUN BOT ---
if __name__ == "__main__":
    try:
        print("Starting Discord bot...")
        bot.run(DISCORD_BOT_TOKEN)
    except discord.errors.LoginFailure:
        print(
            "ERROR: Invalid Discord bot token. Please check your DETERMINATION.ENV file."
        )
    except Exception as e:
        print(f"ERROR: Failed to start bot: {e}")
